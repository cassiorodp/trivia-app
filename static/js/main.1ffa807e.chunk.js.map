{"version":3,"sources":["pages/Config.js","redux/actions/index.js","images/silviosantos.gif","sound_fx/theme-song.mp3","sound_fx/proxima-pergunta.mp3","images/show-do-milhao.png","pages/Login.js","components/Header.js","sound_fx/que-pena.mp3","sound_fx/certa-resposta.mp3","pages/TelaDeJogo.js","sound_fx/losing-sound.mp3","sound_fx/winning-sound.mp3","images/tombo.gif","images/comemoracao.gif","pages/TelaDeFeedback.js","pages/TelaDeRanking.js","App.js","serviceWorker.js","redux/reducers/login.js","redux/reducers/questions.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["Config","Component","SAVE_LOGIN","LOADING_TRUE","REQUEST_COMPLETE","REQUEST_FAIL","Login","state","btnDisable","name","email","startGame","checkLogin","bind","goToConfig","goToGamePage","handleChange","renderForm","saveToLocalStorage","startTheme","Audio","themeSong","nextSound","nextQuestionSound","target","id","value","this","setState","test","props","history","push","localStorage","getItem","a","player","gravatarEmail","score","assertions","setItem","JSON","stringify","fetch","response","json","result","token","className","src","logo","alt","type","onClick","play","sendLogin","getQuestions","htmlFor","placeholder","onChange","disabled","parse","pause","loading","silvioSantos","renderPlayButton","connect","questions","dispatch","saveLogin","userToken","error","fetchQuestions","Header","md5","toString","login","TelaDeJogo","answers","buttonDisable","colorBorders","nextButton","questionNumber","time","wrongSound","wrongQuestionSound","rightSound","rightQuestionSound","shuffleAnswers","counter","intervalId","clearInterval","stopTimer","setInterval","checkCounter","prevState","difficulty","results","points","atob","difficultyPoints","updatePlayer","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","splice","Math","floor","random","map","answer","index","style","backgroundColor","event","savePoints","nextQuestion","resetTimer","category","question","createButtons","renderNextButton","renderContent","TelaDeFeedback","win","goToHome","goToRanking","winning","winningSound","losing","losingSound","selectGif","winningGif","losingGif","feedbackMessage","Ranking","rankingToHome","App","exact","path","component","TelaDeRanking","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ffa807e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Config extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">TITLE</h1>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","// const TOKEN = 'TOKEN';\n\n// const tokenAction = () => ({\n//   type: TOKEN,\n//   payload,\n// });\n\n// export default tokenAction;\n\nexport const SAVE_LOGIN = 'SAVE_LOGIN';\n\nexport const LOADING_TRUE = 'LOADING_TRUE';\nexport const REQUEST_COMPLETE = 'REQUEST_COMPLETE';\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\n\nexport const saveLogin = (name, email) => ({\n  type: SAVE_LOGIN,\n  name,\n  email,\n});\n\nconst requestQuestions = () => ({ type: LOADING_TRUE });\n\nconst getQuestions = (payload) => ({\n  type: REQUEST_COMPLETE,\n  questions: payload,\n});\n\nconst requestError = (error) => ({\n  type: REQUEST_FAIL,\n  error,\n});\n\nexport const fetchQuestions = (userToken) => async (dispatch) => {\n  try {\n    dispatch(requestQuestions());\n\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${userToken}&encode=base64`);\n    const questions = await response.json();\n\n    dispatch(getQuestions(questions));\n  } catch (error) {\n    dispatch(requestError(error));\n  }\n};\n","export default __webpack_public_path__ + \"static/media/silviosantos.42e6a049.gif\";","export default __webpack_public_path__ + \"static/media/theme-song.2067cea8.mp3\";","export default __webpack_public_path__ + \"static/media/proxima-pergunta.297be688.mp3\";","export default __webpack_public_path__ + \"static/media/show-do-milhao.da1746dd.png\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, saveLogin } from '../redux/actions';\nimport silvioSantos from '../images/silviosantos.gif';\nimport themeSong from '../sound_fx/theme-song.mp3';\nimport nextQuestionSound from '../sound_fx/proxima-pergunta.mp3';\nimport '../styles/login.css';\nimport logo from '../images/show-do-milhao.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      btnDisable: true,\n      name: '',\n      email: '',\n      startGame: false,\n    };\n\n    this.checkLogin = this.checkLogin.bind(this);\n    this.goToConfig = this.goToConfig.bind(this);\n    this.goToGamePage = this.goToGamePage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.renderForm = this.renderForm.bind(this);\n    this.saveToLocalStorage = this.saveToLocalStorage.bind(this);\n\n    this.startTheme = new Audio(themeSong);\n    this.nextSound = new Audio(nextQuestionSound);\n  }\n\n  handleChange({ target }) {\n    const { id, value } = target;\n\n    this.setState({ [id]: value }, () => {\n      this.checkLogin();\n    });\n  }\n\n  checkLogin() {\n    const { name, email } = this.state;\n    const emailValidation = /\\S+@\\S+\\.\\S+/;\n    if (emailValidation.test(email) && name) this.setState({ btnDisable: false });\n    else this.setState({ btnDisable: true });\n  }\n\n  goToConfig() {\n    const { history } = this.props;\n    history.push('/config');\n  }\n\n  goToGamePage() {\n    const { history } = this.props;\n    if (localStorage.getItem('token')) history.push('/tela-de-jogo');\n  }\n\n  async saveToLocalStorage() {\n    const { name, email } = this.state;\n    const player = { player: { name, gravatarEmail: email, score: 0, assertions: 0 } };\n    localStorage.setItem('state', JSON.stringify(player));\n\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const result = await response.json();\n    localStorage.setItem('token', JSON.stringify(result.token));\n  }\n\n  renderPlayButton() {\n    return (\n      <div className=\"page-logo\">\n        <img className=\"image\" src={ logo } alt=\"logo\" />\n        <button\n          className=\"play-button\"\n          type=\"button\"\n          onClick={ () => {\n            this.setState({ startGame: true });\n            this.startTheme.play();\n          } }\n        >\n          Jogar\n        </button>\n      </div>\n    );\n  }\n\n  renderForm() {\n    const { btnDisable, name, email } = this.state;\n    const { sendLogin, getQuestions } = this.props;\n\n    return (\n      <form className=\"home-form\">\n        <label htmlFor=\"name\" className=\"form-label\">\n          Nome:\n          <input\n            className=\"form-control\"\n            data-testid=\"input-player-name\"\n            type=\"text\"\n            id=\"name\"\n            placeholder=\"Digite seu nome\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"email\" className=\"form-label\">\n          Email:\n          <input\n            className=\"form-control\"\n            data-testid=\"input-gravatar-email\"\n            type=\"email\"\n            id=\"email\"\n            placeholder=\"Digite seu email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <div className=\"button-section\">\n          <button\n            className=\"btn btn-light start-button\"\n            disabled={ btnDisable }\n            data-testid=\"btn-play\"\n            type=\"button\"\n            onClick={ async () => {\n              await this.saveToLocalStorage();\n              sendLogin(name, email);\n              await getQuestions(JSON.parse(localStorage.getItem('token')));\n              this.startTheme.pause();\n              this.nextSound.play();\n              this.goToGamePage();\n            } }\n          >\n            Iniciar\n          </button>\n          <button\n            className=\"config-button\"\n            data-testid=\"btn-settings\"\n            type=\"button\"\n            onClick={ this.goToConfig }\n          >\n            <i className=\"fas fa-cog\" />\n          </button>\n        </div>\n      </form>\n    );\n  }\n\n  render() {\n    const { loading } = this.props;\n    const { startGame } = this.state;\n    if (loading) {\n      return (<img\n        className=\"loading-img\"\n        src={ silvioSantos }\n        alt=\"silvio santos\"\n      />);\n    }\n    if (!startGame) return (this.renderPlayButton());\n    if (startGame) return (this.renderForm());\n  }\n}\n\nconst mapStateToProps = ({ questions }) => ({\n  loading: questions.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendLogin: (name, email) => dispatch(saveLogin(name, email)),\n  getQuestions: (userToken) => dispatch(fetchQuestions(userToken)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport '../styles/header.css';\n\nclass Header extends Component {\n  render() {\n    const { name, email, score } = this.props;\n    // const { score } = JSON.parse(localStorage.getItem('state')).player;\n    return (\n      <header className=\"header-player\">\n        <img className=\"profile-picture\" data-testid=\"header-profile-picture\" src={ `https://www.gravatar.com/avatar/${md5(email).toString()}` } alt=\"profile\" />\n        <span data-testid=\"header-player-name\">{`Jogador: ${name}`}</span>\n        <span data-testid=\"header-score\">{`Placar: ${score}`}</span>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ login }) => ({\n  name: login.name,\n  email: login.email,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Header);\n","export default __webpack_public_path__ + \"static/media/que-pena.afd94236.mp3\";","export default __webpack_public_path__ + \"static/media/certa-resposta.ac7432fe.mp3\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport nextQuestionSound from '../sound_fx/proxima-pergunta.mp3';\nimport wrongQuestionSound from '../sound_fx/que-pena.mp3';\nimport rightQuestionSound from '../sound_fx/certa-resposta.mp3';\nimport '../styles/telaDeJogo.css';\n\nclass TelaDeJogo extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      answers: [],\n      buttonDisable: false,\n      colorBorders: false,\n      nextButton: false,\n      questionNumber: 0,\n      time: 30,\n    };\n\n    this.nextSound = new Audio(nextQuestionSound);\n    this.wrongSound = new Audio(wrongQuestionSound);\n    this.rightSound = new Audio(rightQuestionSound);\n  }\n\n  componentDidMount() {\n    this.shuffleAnswers();\n    this.counter();\n  }\n\n  stopTimer() {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n    this.setState({ buttonDisable: true, colorBorders: true, nextButton: true });\n  }\n\n  resetTimer() {\n    this.setState({\n      buttonDisable: false, colorBorders: false, time: 30, nextButton: false });\n    this.counter();\n  }\n\n  checkCounter() {\n    const { time } = this.state;\n    if (time <= 1) {\n      this.stopTimer();\n    }\n  }\n\n  counter() {\n    const ONE_SECOND = 1000;\n    const count = () => this\n      .setState(({ time }) => ({ time: time - 1 }), this.checkCounter());\n    const intervalId = setInterval(count, ONE_SECOND);\n    this.setState({ intervalId });\n  }\n\n  nextQuestion() {\n    const { questionNumber } = this.state;\n    const { history } = this.props;\n    const LAST_QUESTION = 4;\n    if (questionNumber < LAST_QUESTION) {\n      this.setState((prevState) => (\n        { questionNumber: prevState.questionNumber + 1 }\n      ), () => {\n        this.shuffleAnswers();\n        this.nextSound.play();\n      });\n    } else {\n      history.push('/tela-de-feedback');\n    }\n  }\n\n  savePoints({ target: { id } }) {\n    const { questionNumber, time } = this.state;\n    const { questions: { results } } = this.props;\n    const { difficulty } = results[questionNumber];\n\n    const difficultyPoints = () => {\n      const hardPoints = 3;\n      const mediumPoints = 2;\n      const easyPoints = 1;\n\n      switch (atob(difficulty)) {\n      case 'hard':\n        return hardPoints;\n      case 'medium':\n        return mediumPoints;\n      case 'easy':\n        return easyPoints;\n      default:\n        return 0;\n      }\n    };\n\n    if (id === 'correct') {\n      const magicMike = 10;\n      const points = magicMike + (time * difficultyPoints());\n      const { player } = JSON.parse(localStorage.getItem('state'));\n      const updatePlayer = {\n        player: { ...player,\n          assertions: player.assertions + 1,\n          score: player.score + points,\n        },\n      };\n      localStorage.setItem('state', JSON.stringify(updatePlayer));\n    }\n  }\n\n  shuffleAnswers() {\n    const { questionNumber } = this.state;\n    const { questions: { results } } = this.props;\n    const {\n      type,\n      incorrect_answers: incorrectAnswers,\n      correct_answer: correctAnswer } = results[questionNumber];\n    const randomIndex = () => {\n      if (type === 'boolean') {\n        const randomNumber = Math.floor(Math.random() * (1 - 0 + 1) + 0);\n        return randomNumber;\n      }\n      const randomNumber = Math.floor(Math.random() * (2 - 0 + 1) + 0);\n      return randomNumber;\n    };\n    const answers = [...incorrectAnswers];\n    answers.splice(randomIndex(), 0, correctAnswer);\n    this.setState({ answers });\n  }\n\n  createButtons() {\n    const { answers, questionNumber } = this.state;\n    const { buttonDisable, colorBorders } = this.state;\n    const { questions: { results } } = this.props;\n    const { correct_answer: correctAnswer } = results[questionNumber];\n    return (\n      answers.map((answer, index) => {\n        if (answer === correctAnswer) {\n          return (\n            <button\n              id=\"correct\"\n              data-testid=\"correct-answer\"\n              className=\"answer correct-answer\"\n              disabled={ buttonDisable }\n              type=\"button\"\n              key={ answer }\n              style={ colorBorders ? { backgroundColor: '#13814A ' } : null }\n              onClick={ (event) => {\n                this.setState({ colorBorders: true });\n                this.savePoints(event);\n                this.stopTimer();\n                this.rightSound.play();\n              } }\n            >\n              { atob(answer) }\n            </button>\n          );\n        }\n\n        return (\n          <button\n            data-testid={ `wrong-answer-${index}` }\n            className=\"answer wrong-answer\"\n            disabled={ buttonDisable }\n            type=\"button\"\n            key={ answer }\n            style={ colorBorders ? { backgroundColor: '#000000 ' } : null }\n            onClick={ () => {\n              this.setState({ colorBorders: true });\n              this.stopTimer();\n              this.wrongSound.play();\n            } }\n          >\n            { atob(answer) }\n          </button>\n        );\n      })\n    );\n  }\n\n  renderNextButton() {\n    return (\n      <button\n        className=\"next-button\"\n        type=\"button\"\n        onClick={ () => {\n          this.nextQuestion();\n          this.resetTimer();\n        } }\n        data-testid=\"btn-next\"\n      >\n        Próxima\n      </button>\n    );\n  }\n\n  renderContent() {\n    const { score } = JSON.parse(localStorage.getItem('state')).player;\n    const { time, questionNumber, nextButton } = this.state;\n    const { questions: { results } } = this.props;\n    return (\n      <main className=\"gamepage-content\">\n        <Header score={ score } />\n        <section>\n          <p\n            data-testid=\"question-category\"\n          >\n            { atob(results[questionNumber].category) }\n          </p>\n          <p data-testid=\"question-text\">{ atob(results[questionNumber].question) }</p>\n          <div className=\"answers-section\">\n            { this.createButtons() }\n          </div>\n          <div>\n            {nextButton && this.renderNextButton() }\n          </div>\n          <div className=\"question-timer\">\n            {`Tempo: ${time}`}\n          </div>\n        </section>\n      </main>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ questions }) => ({\n  questions: questions.questions,\n});\n\nTelaDeJogo.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n  })),\n}.isRequired;\n\nexport default connect(mapStateToProps)(TelaDeJogo);\n","export default __webpack_public_path__ + \"static/media/losing-sound.41ea0c54.mp3\";","export default __webpack_public_path__ + \"static/media/winning-sound.390d14cf.mp3\";","export default __webpack_public_path__ + \"static/media/tombo.08748272.gif\";","export default __webpack_public_path__ + \"static/media/comemoracao.20b8f380.gif\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport losingSound from '../sound_fx/losing-sound.mp3';\nimport winningSound from '../sound_fx/winning-sound.mp3';\nimport losingGif from '../images/tombo.gif';\nimport winningGif from '../images/comemoracao.gif';\nimport '../styles/telaDeFeedBack.css';\n\nclass TelaDeFeedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      win: false,\n    };\n\n    this.goToHome = this.goToHome.bind(this);\n    this.goToRanking = this.goToRanking.bind(this);\n\n    this.winning = new Audio(winningSound);\n    this.losing = new Audio(losingSound);\n  }\n\n  componentDidMount() {\n    this.selectGif();\n  }\n\n  selectGif() {\n    const { assertions } = JSON.parse(localStorage.getItem('state')).player;\n    const IT_COULD_BE_BETTER = 3;\n    if (assertions >= IT_COULD_BE_BETTER) this.setState({ win: true });\n  }\n\n  goToRanking() {\n    const { history } = this.props;\n    history.push('/tela-de-ranking');\n  }\n\n  goToHome() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  feedbackMessage() {\n    const { assertions } = JSON.parse(localStorage.getItem('state')).player;\n    const IT_COULD_BE_BETTER = 3;\n    if (assertions < IT_COULD_BE_BETTER) {\n      this.losing.play();\n      return 'Podia ser melhor...';\n    }\n    if (assertions >= IT_COULD_BE_BETTER) {\n      this.winning.play();\n      return 'Mandou bem!';\n    }\n  }\n\n  render() {\n    const { win } = this.state;\n    const { assertions, score } = JSON.parse(localStorage.getItem('state')).player;\n    return (\n      <main className=\"feedback-content\">\n        <Header score={ score } />\n        <section className=\"feedback-text\">\n          <img\n            className=\"feedback-gif\"\n            src={ win ? winningGif : losingGif }\n            alt=\"winning or losing \"\n          />\n          <p data-testid=\"feedback-text\">{ this.feedbackMessage() }</p>\n          <p>\n            Você acertou\n            {' '}\n            <span data-testid=\"feedback-total-question\">{ assertions }</span>\n          </p>\n          <p>\n            Um total de\n            {' '}\n            <span data-testid=\"feedback-total-score\">{ score }</span>\n          </p>\n        </section>\n        <section className=\"feedback-buttons\">\n          <button\n            className=\"play-again-button\"\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ this.goToHome }\n          >\n            Jogar Novamente\n          </button>\n          <button\n            className=\"ranking-button\"\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ this.goToRanking }\n          >\n            Ver Ranking\n          </button>\n        </section>\n      </main>\n    );\n  }\n}\n\nTelaDeFeedback.propTypes = {\n  history: PropTypes.object,\n}.isRequired;\n\nexport default TelaDeFeedback;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.rankingToHome = this.rankingToHome.bind(this);\n  }\n\n  rankingToHome() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  render() {\n    return (\n      <div>\n        <title data-testid=\"ranking-title\">Ranking dos Jogadores</title>\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.rankingToHome }\n        >\n          Voltar ao Início\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.object,\n}.isRequired;\n\nexport default Ranking;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n// import logo from './trivia.png';\nimport './App.css';\nimport Config from './pages/Config';\nimport Login from './pages/Login';\nimport TelaDeJogo from './pages/TelaDeJogo';\nimport TelaDeFeedback from './pages/TelaDeFeedback';\nimport TelaDeRanking from './pages/TelaDeRanking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/config\" component={ Config } />\n      <Route exact path=\"/tela-de-jogo\" component={ TelaDeJogo } />\n      <Route exact path=\"/tela-de-feedback\" component={ TelaDeFeedback } />\n      <Route exact path=\"/tela-de-ranking\" component={ TelaDeRanking } />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SAVE_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n};\n\nconst login = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_LOGIN:\n    return {\n      ...state,\n      name: action.name,\n      email: action.email,\n    };\n  default: return state;\n  }\n};\n\nexport default login;\n","import { LOADING_TRUE, REQUEST_COMPLETE, REQUEST_FAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  loading: false,\n  questions: {},\n};\n\nconst questions = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOADING_TRUE:\n    return {\n      ...state,\n      loading: true,\n    };\n  case REQUEST_COMPLETE:\n    return {\n      ...state,\n      loading: false,\n      questions: action.questions,\n    };\n  case REQUEST_FAIL:\n    return {\n      ...state,\n      loading: false,\n      error: action.error,\n    };\n  default: return state;\n  }\n};\n\nexport default questions;\n","import { combineReducers } from 'redux';\nimport login from './login';\nimport questions from './questions';\n\nconst rootReducer = combineReducers({ login, questions });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter basename='/trivia-app'>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}